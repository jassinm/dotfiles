#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
File: pyxlstools.py
Created: Wed 25 May 2011 08:56:06 AM EDT
Last Modified: Wed 25 May 2011 08:56:06 AM EDT
Author: Jassin MEKNASSI
Description: converts an xls file to a csv file
'''

from optparse import OptionParser
from xlrd import open_workbook
from xlrd import xldate_as_tuple
from openpyxl.reader.excel import load_workbook
from openpyxl.workbook import Workbook
from dateutil.parser import parse as dateparser
import sys
import csv
import datetime
import os

csvwriter = csv.writer(sys.stdout)


def encodeh(val):
    if isinstance(val, unicode):
        val = val.encode('utf-8')
        # val = val.replace('\n','')
        # val = val.replace(',','')
    return val

def datatypeconversion(val):
    try:
        return float(val)
    except ValueError:
        pass
    #try:
        #return dateparser(val)
    #except Exception:
        #pass
    return val

def xlsxtocsv(filename, sheetindex=0):
    """
    converts an xls (up 2003) to a csv
    csvoutput to stdout
    """
    wb = load_workbook(filename = filename,use_iterators = True)
    counter=0
    for sheetname in wb.get_sheet_names():
        if counter == sheetindex:
            ws = wb.get_sheet_by_name(name=sheetname)
            break
    for row in ws.iter_rows():
        out = []
        for cell in row:
            out.append(encodeh(cell.internal_value))
        csvwriter.writerow(out)

def convertxlrdrow(rowtypes, rowvalues):
    out = []
    for index , xtype in enumerate(rowtypes):
        if xtype == 3:
            tpldate = xldate_as_tuple(rowvalues[index], 0)
            out.append(datetime.datetime(*tpldate))
        else:
            out.append(encodeh(rowvalues[index]))
    return out

def xls2csv(filename, sheetindex=0):
    """
    converts an xlsx (2007) to a csv
    csvoutput to stdout
    """
    wbk = open_workbook(filename, encoding_override='utf-8')
    sheet = wbk.sheet_by_index(sheetindex)
    for rowidx in range(0, sheet.nrows):
        rowvalues = sheet.row_values(rowidx)
        rowtypes = sheet.row_types(rowidx)
        rowvalues = convertxlrdrow(rowtypes,rowvalues)#[encodeh(r) for r in rowvalues]
        csvwriter.writerow(rowvalues)

def xls_from_csvs(csvlist,outputfilename):
    """docstring for xls_from_csvs"""
    wb = Workbook(optimized_write = True)
    for csvfile in csvlist:
        ws = wb.create_sheet()
        filename ,ext =os.path.splitext(csvfile)
        ws.title = filename.lstrip()
        filer = open(csvfile)
        csvreader = csv.reader(filer)
        for row in csvreader:
            ws.append([datatypeconversion(r) for r in row])
    wb.save(outputfilename)

def listsheetnames(filename):
    """
    list sheet names of an xls file
    """
    wbk = open_workbook(filename, encoding_override='utf-8')
    for sheetname in wbk.sheet_names():
        print sheetname

def listsheetnames_xls(filename):
    """
    list sheet names of an xlsx file
    """
    wb = load_workbook(filename = filename)
    for sheetname in wb.get_sheet_names():
        print sheetname

def printusage():
    """
    outputs pyxlstools usage
    """

    print 'usage pyxlstools [options] -h'
    print 'options: -------'
    print 'tocsv      : convert sheet to a csvfile'
    print 'listsheets : list sheetnames'
    print 'mergecsvs : mergecsvs to xlsx'

def main():
    """
    main : parser different options and run's the appropriate function
    """
    toptions = set(['tocsv', 'listsheets','mergecsvs'])
    if len(sys.argv) <= 2:
        printusage()
        return
    roption = sys.argv[1]
    if roption not in toptions:
        printusage()
        return
    parser = OptionParser()
    parser.add_option(
        '-f',
        '--file',
        dest='filename',
        action='store',
        type='string',
        help='inputfile',
        )

    if roption == 'tocsv':
        usage = 'usage : %prog tocsv'
        parser.add_option(
            '-i',
            '--index',
            dest='index',
            action='store',
            type='int',
            default = 0,
            help='sheet index',
            )
        (options, args) = parser.parse_args()
        parser.usage = usage
        if options.filename:
            if options.filename.endswith('.xls'):
                xls2csv(options.filename,options.index)
            elif options.filename.endswith('.xlsx') or options.filename.endswith('.XLSX'):
                xlsxtocsv(options.filename,options.index)
            else:
                print 'please provide xls or xlsx file'
        else:
            parser.print_help()
    elif roption == 'listsheets':
        usage = 'use : %prog listsheetnames'
        parser.usage = usage
        (options, args) = parser.parse_args()
        if options.filename:
            if options.filename.endswith('.xls'):
                listsheetnames(options.filename)
            elif options.filename.endswith('.xlsx'):
                listsheetnames_xls(options.filename)
            else:
                print 'please provide xls or xlsx file'
        else:
            parser.print_help()
    elif roption == 'mergecsvs':
        (options, args) = parser.parse_args()
        print options.filename
        args =set(args)
        args.discard('mergecsvs')
        print args
        xls_from_csvs(args,options.filename)
    else:
        printusage()


if __name__ == '__main__':
    status = main()
    sys.exit(status)
