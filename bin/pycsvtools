#!/usr/bin/env python
'''
File: pycsvtools.py
Created: Thu 26 May 2011 10:38:51 AM EDT
Last Modified: Thu 26 May 2011 04:19:27 PM EDT
Author: Jassin MEKNASSI
Description: simple csvtools used when wc and ack fails for csv's
having new lines in fields
'''

from optparse import OptionParser
import csv
import sys
import json
from dateutil.parser import parse as dateparser
csv.field_size_limit(1000000000)

csvwriter = csv.writer(sys.stdout)


def findrow(csvreader, hint):

    header = csvreader.next()
    keys = list(hint.keys())
    searchkey = keys[0]
    if searchkey not in header:
        csvwriter.writerow(header)
        raise Exception, 'hint key not found in header'

    hintindex = header.index(searchkey)
    for row in csvreader:
        if row[hintindex].strip() == hint[searchkey].strip():
            csvwriter.writerow(row)
            break


def printCsv2json(csvreader):

    header = csvreader.next()
    out = []

    for row in csvreader:
        dtemp = {}
        for (index, h) in enumerate(header):
            try:
                toaddvalue = float(row[index])
            except:
                try:
                    toaddvalue = \
                        dateparser(row[index]).strftime('%Y-%m-%dT%H:%M:%S'
                            )
                except:
                    toaddvalue = row[index]
            dtemp[h.lower()] = toaddvalue

        out.append(dtemp)

    print json.dumps(out, indent=4)


def printNrofrows(csvreader):
    counter = 0
    for row in csvreader:
        counter += 1

    print counter


def printVal(csvreader, rownr, colnr):
    counter = 0

    for row in csvreader:
        if counter == rownr:
            print row[colnr]
            break
        counter += 1


def printCol(csvreader, colnr):

    for row in csvreader:
        print row[colnr]


def printRow(csvreader, rownr):

    counter = 0
    for row in csvreader:
        counter += 1
        if counter == rownr:
            csvwriter.writerow(row)
            break


def printusage():
    print 'usage : pycsvtools [options] -h'
    print 'options: -------'
    print 'printrow : print row '
    print 'printcol : print column '
    print 'printval : print value at row / column'
    print 'nrofrows : print nrofrows'
    print 'tojson   : convert to a json file'
    print 'findrow  : finds a row using a dict hint'


def main():

    pycsvoptions = ['printrow', 'printcol', 'printval', 'nrofrows',
                    'tojson','findrow']

    if len(sys.argv) <= 2:
        printusage()
        return
    roption = sys.argv[1]
    if roption not in pycsvoptions:
        printusage()
        return
    if roption == 'printcol':
        usage = 'usage : %prog printcol'
        parser = OptionParser(usage=usage)
        parser.add_option(
            '-f',
            '--file',
            dest='filename',
            action='store',
            type='string',
            help='inputfile',
            )
        parser.add_option(
            '-n',
            '--colnr',
            dest='colnr',
            action='store',
            type='int',
            help='column number to print (starts @ 0)',
            )
        (options, args) = parser.parse_args()
        if options.filename and options.colnr:
            csvreader = csv.reader(open(options.filename, 'r'))
            printCol(csvreader, options.colnr)
        else:
            parser.print_help()
    elif roption == 'printrow':
        usage = 'usage : %prog printrow'
        parser = OptionParser(usage=usage)
        parser.add_option(
            '-f',
            '--file',
            dest='filename',
            action='store',
            type='string',
            help='inputfile',
            )
        parser.add_option(
            '-n',
            '--rownr',
            dest='rownr',
            action='store',
            type='int',
            help='row number to print (starts @ 0)',
            )
        (options, args) = parser.parse_args()
        if options.filename and options.rownr:
            csvreader = csv.reader(open(options.filename, 'r'))
            printRow(csvreader, options.rownr)
        else:
            parser.print_help()
    elif roption == 'printval':

        usage = 'usage : %prog printval'
        parser = OptionParser(usage=usage)
        parser.add_option(
            '-f',
            '--file',
            dest='filename',
            action='store',
            type='string',
            help='inputfile',
            )
        parser.add_option(
            '-r',
            '--rownr',
            dest='rownr',
            action='store',
            type='int',
            help='row number to print (starts @ 0)',
            )
        parser.add_option(
            '-c',
            '--colnr',
            dest='colnr',
            action='store',
            type='int',
            help='column number to print (starts @ 0)',
            )
        (options, args) = parser.parse_args()
        if options.filename and options.rownr is not None and options.colnr is not None:
            csvreader = csv.reader(open(options.filename, 'r'))
            printVal(csvreader, options.rownr, options.colnr)
        else:
            parser.print_help()
    elif roption == 'nrofrows':
        usage = 'usage : %prog nrofrows'
        parser = OptionParser(usage=usage)
        parser.add_option(
            '-f',
            '--file',
            dest='filename',
            action='store',
            type='string',
            help='inputfile',
            )

        (options, args) = parser.parse_args()
        if options.filename:
            csvreader = csv.reader(open(options.filename, 'r'))
            printNrofrows(csvreader)
        else:
            parser.print_help()
    elif roption == 'printjson':

        usage = 'usage : %prog printjson'
        parser = OptionParser(usage=usage)
        parser.add_option(
            '-f',
            '--file',
            dest='filename',
            action='store',
            type='string',
            help='inputfile',
            )

        (options, args) = parser.parse_args()
        if options.filename:
            csvreader = csv.reader(open(options.filename, 'r'))
            printCsv2json(csvreader)
        else:
            parser.print_help()
    elif roption == 'findrow':

        usage = 'usage : %prog findeow'
        parser = OptionParser(usage=usage)
        parser.add_option(
            '-f',
            '--file',
            dest='filename',
            action='store',
            type='string',
            help='inputfile',
            )

        parser.add_option(
            '-d',
            '--hint',
            action='store',
            type='string',
            dest='hint',
            help='hint : dict',
            )
        (options, args) = parser.parse_args()
        if options.filename and options.hint:
            csvreader = csv.reader(open(options.filename, 'r'))
            hintdict = json.loads(options.hint)
            findrow(csvreader, hintdict)
        else:
            parser.print_help()


if __name__ == '__main__':
    status = main()
    sys.exit(status)

